Traceback (most recent call last):
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\Paul\.conda\envs\2021_13\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Paul\.conda\envs\2021_13\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# display packages
from IPython.display import display, Markdown
import ipywidgets as widgets

class ThreeScaleWidget:
    
    def __init__(self, scale_type, colors = None, name, tooltips = None, values):
        
        #Definition of scale type
        if (scale_type == "level"):
            self.b_names = {"b3" : "LOW","b2" : "MEDIUM", "b1" : "HIGH"}
        elif (scale_type == "compliance"):
            self.b_names = {"b3" : "LOW COMPLIANCE", "b2" : "PARTIAL COMPLIANCE", "b1" : "FULL COMPLIANCE"}
        else:
            self.b_names = scale_type
        
        #Definition of colors
        if (colors == None):
            self.colors = {"b1" : 'green', "b2" : 'gold', "b3" : 'red', "selection" : 'cornflowerblue'}
        else:
            self.colors = colors
        
        #Definition of name
        self.name = name
        
        #Definition of tooltips
        if (tooltips == None):
            self.tooltips = {"b1" : '', "b2" : '', "b3" : ''}
        else:
            self.tooltips = tooltips
            
        #Definition of values
        self.values = values
        
        self.selection = 0
        
        #Definition of buttons
        
        self.b1 = widgets.Button(
            description=self.b_names[2],
            disabled=False,
            button_style='success', # 'success', 'info', 'warning', 'danger' or ''
            tooltip=self.tooltips["b1"],
            #icon='check' # (FontAwesome names without the `fa-` prefix)
        )

        self.b2 = widgets.Button(
            description='MEDIUM',
            disabled=False,
            button_style='warning', # 'success', 'info', 'warning', 'danger' or ''
            tooltip='New space',
            #icon='check' # (FontAwesome names without the `fa-` prefix)
        )

        self.b3 = widgets.Button(
            description='LOW',
            disabled=False,
            button_style='danger', # 'success', 'info', 'warning', 'danger' or ''
            tooltip='COTS',
            #icon='check' # (FontAwesome names without the `fa-` prefix)
        )

## Pi_Q selection

pi_Q_selection = 0
pi_Q_value = {0:1.0, 1:1.0, 2:1.25, 3: 1.5}

b1_pi_Q = widgets.Button(
    description='HIGH',
    disabled=False,
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Space',
    #icon='check' # (FontAwesome names without the `fa-` prefix)
)

b2_pi_Q = widgets.Button(
    description='MEDIUM',
    disabled=False,
    button_style='warning', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='New space',
    #icon='check' # (FontAwesome names without the `fa-` prefix)
)

b3_pi_Q = widgets.Button(
    description='LOW',
    disabled=False,
    button_style='danger', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='COTS',
    #icon='check' # (FontAwesome names without the `fa-` prefix)
)

b1_pi_Q.style.button_color = 'green'
b2_pi_Q.style.button_color = 'gold'
b3_pi_Q.style.button_color = 'red'

output_pi_Q = widgets.Output()

def on_button_1_pi_Q_clicked(b):
    output_pi_Q.clear_output()
    b1_pi_Q.style.button_color = 'cornflowerblue'
    b2_pi_Q.style.button_color = 'gold'
    b3_pi_Q.style.button_color = 'red'
    global pi_Q_selection
    pi_Q_selection = 1
    with output_pi_Q:
        print(str(pi_Q_value[pi_Q_selection]))
    process_lambda3()

        
def on_button_2_pi_Q_clicked(b):
    output_pi_Q.clear_output()
    b1_pi_Q.style.button_color = 'green'
    b2_pi_Q.style.button_color = 'cornflowerblue'
    b3_pi_Q.style.button_color = 'red'
    global pi_Q_selection
    pi_Q_selection = 2
    with output_pi_Q:
        print(str(pi_Q_value[pi_Q_selection]))
    process_lambda3()
        
def on_button_3_pi_Q_clicked(b):
    output_pi_Q.clear_output()
    b1_pi_Q.style.button_color = 'green'
    b2_pi_Q.style.button_color = 'gold'
    b3_pi_Q.style.button_color = 'cornflowerblue'
    global pi_Q_selection
    pi_Q_selection = 3
    with output_pi_Q:
        print(str(pi_Q_value[pi_Q_selection]))
    process_lambda3()

b1_pi_Q.on_click(on_button_1_pi_Q_clicked)
b2_pi_Q.on_click(on_button_2_pi_Q_clicked)
b3_pi_Q.on_click(on_button_3_pi_Q_clicked)

pi_Q_widget = widgets.HBox([b1_pi_Q,b2_pi_Q,b3_pi_Q])
pi_Q_layout = widgets.TwoByTwoLayout(top_left=widgets.Label(value="$\Pi_{Q}$ choice", width='auto'),
               bottom_left=widgets.HBox([widgets.HTML(value = f"<b><font color='red'>Value : </b>"), output_pi_Q]),
               bottom_right=pi_Q_widget)
------------------

[1;36m  File [1;32m"C:\Users\Paul\AppData\Local\Temp\ipykernel_4272\718217318.py"[1;36m, line [1;32m7[0m
[1;33m    def __init__(self, scale_type, colors = None, name, tooltips = None, values):[0m
[1;37m                ^[0m
[1;31mSyntaxError[0m[1;31m:[0m non-default argument follows default argument

SyntaxError: non-default argument follows default argument (718217318.py, line 7)

